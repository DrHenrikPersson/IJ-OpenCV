{"name":"IJ-OpenCV","tagline":"Connecting ImageJ and OpenCV","body":"IJ-OpenCV is a Java library that allows the communication of ImageJ/Fiji - a software for image analysis that is widely employed in life sciences - and OpenCV - a well-known computer vision library.\r\n\r\nThere are several benefits provided by the communication of ImageJ/Fiji and OpenCV. From the ImageJ/Fiji perspective, this tool is enhanced with several computer vision and machine learning algorithms, avoiding the re-implementation of methods and the connection with several external libraries. From the OpenCV point of view, this library is improved with a simple-to-use GUI and with the functionality to manage regions of interest.\r\n\r\nIJ-OpenCV is free to use and licensed under the license GNU GPL 3.0.\r\n\r\n### Download\r\nThe [IJ-OpenCV library]().\r\nPlugins developed with the IJ-OpenCV library: [plugins](https://github.com/joheras/IJ-OpenCV/raw/master/Plugins/IJ-OpenCV.zip)\r\n\r\n### Dependencies\r\n[ImageJ](http://rsb.info.nih.gov/ij/index.html) or [Fiji](http://fiji.sc/Fiji).\r\nRequired [javacv](https://github.com/bytedeco/javacv) library files: [javacv.jar](), [javacpp.jar](), [opencv.jar]()\r\nAnd platform-dependent library files:\r\n* [32-bit Windows]()\r\n* [64-bit Windows]()\r\n* [64-bit Mac]()\r\n* [32-bit Linux]()\r\n* [64-bit Linux]()\r\n\r\n### Installation\r\n1. Download and install either ImageJ or Fiji (check that the downloaded version is working with Java 8).\r\n2. Unzip the [file]() containing the plugins developed with the IJ-OpenCV library, and copy the generated folder in the plugins folder of ImageJ/Fiji.\r\n3. Put above jar files ([ij-opencv.jar](), [javacv.jar](), [javacpp.jar](), [opencv.jar](), [32-bit Windows](), [64-bit Windows](), [64-bit Mac](), [32-bit Linux](), [64-bit Linux]()) into your ImageJ/Fiji plugins folder.\r\n\r\nAfter restarting ImageJ/Fiji, you will find the option IJ-OpenCV under the plugins menu. That submenu contains the plugins developed with this library.\r\n\r\n### System requirements\r\nIJ-OpenCV requires that ImageJ/Fiji works with Java 8.\r\n\r\n### Documentation\r\nThe API of the IJ-OpenCV library is available at the following [link](http://joheras.github.io/IJ-OpenCV/javadoc/).\r\n\r\n### Source files\r\nThe source files of the IJ-OpenCV library are available at the following [link](https://github.com/joheras/IJ-OpenCV).\r\nIn addition, the source files of the plugins developed with the IJ-OpenCV library are available [here]().\r\n\r\n### List of IJ-OpenCV plugins\r\n* Adaptive threshold: Given an image, it applies either the adaptive Gaussian threshold or the adaptive mean threshold. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html?highlight=adaptive%20threshold#adaptivethreshold).\r\n* BGR histogram comparison: Given a stack of images, it compares the images using the BGR histogram and employing different measures . [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/histogram_calculation/histogram_calculation.html?highlight=histogram).\r\n* Black hat: Given a grayscale image, it returns such an image after applying the black hat morphological operation. [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html?highlight=black%20hat#black-hat).\r\n* Canny edge detection: Given an image, it detects its using the Canny edge detection algorithm. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/imgproc/doc/feature_detection.html?highlight=canny%20edge%20detection#void%20Canny%28InputArray%20image,%20OutputArray%20edges,%20double%20threshold1,%20double%20threshold2,%20int%20apertureSize,%20bool%20L2gradient%29).\r\n* Convex hull from polygon: Given a polygonal selection, it returns its convex hull . [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/shapedescriptors/hull/hull.html?highlight=convex%20hull).\r\n* Detect circles: Given an image, it detects the circles of such an image using the Hough Circle transform. [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/hough_circle/hough_circle.html?highlight=hough%20circles).\r\n* Face detection: Given an image, it detects the faces of the image. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/contrib/doc/facerec/facerec_tutorial.html).\r\n* Find contours: Given an image, it detects the contours of the objects of such an image. [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/shapedescriptors/find_contours/find_contours.html?highlight=find%20contours).\r\n* High dynamic range imaging: Given a stack of images, it creates a high dynamic range image using the exposure fusion. [OpenCV link to the topic](http://docs.opencv.org/3.0-beta/doc/tutorials/photo/hdr_imaging/hdr_imaging.html).\r\n* Hough Lines: Given an image, it computes the lines of the image using the Hough transform. [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/hough_lines/hough_lines.html?highlight=hough%20lines).\r\n* HSV histogram comparison: Given a stack of images, it compares the images using the HSV histogram and employing different measures . [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/histogram_calculation/histogram_calculation.html?highlight=histogram).\r\n* Keypoint detector: Given an image, it detects its keypoints using different algorithms. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/features2d/doc/common_interfaces_of_feature_detectors.html?highlight=keypoint).\r\n* Kmeans clustering: Given a stack of images, it groups them using the BGR histogram as features and the Kmeans clustering algorithm. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/core/doc/clustering.html?highlight=kmeans).\r\n* Non local means denoising: Given an image, it applies non local means denoising. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/photo/doc/denoising.html).\r\n* RotatedRect from a polygon ROI: Given a polygonal selection, it returns the associated rotated rectangle. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html?highlight=rotated%20rect#RotatedRect).\r\n* Stitching: Given an array of images, it stitches them creating a panoramic view. [OpenCV link to the topic](http://docs.opencv.org/2.4/modules/stitching/doc/introduction.html?highlight=stitching).\r\n* Template Matching: Given an image, and a selection (template) in that image, it finds all the other regions of the image that match with the template. [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html?highlight=template%20matching).\r\n* White Hat: Given a grayscale image, it returns such an image after applying the white hat morphological operation. [OpenCV link to the topic](http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html?highlight=black%20hat#top-hat).\r\n\r\n### Videos\r\nWe include several videos showing how the plugins developed with the IJ-OpenCV library work.\r\n\r\n#### Video 1\r\nThis first video shows how the \"adaptive thresholding\", \"BGR Histogram Comparison\" and \"HSV Histogram comparison\" plugins work.\r\n\r\n[![Everything Is AWESOME](http://www.mailpoet.com/wp-content/uploads/2012/01/wysija-youtube-color-player.png)](https://www.youtube.com/watch?v=ERoqTnUOayA)\r\n\r\n#### Video 2\r\nThis second video shows how the following plugins work:\r\n* BlackHat and White Hat morphological operators\r\n* Canny edge detection\r\n* Convex hull from polygon ROI\r\n* Circle detection\r\n* Measure oxidation\r\n* Face detection\r\n* Find Contours\r\n* High Dynamic Range Imaging\r\n\r\n[![Everything Is AWESOME](http://www.mailpoet.com/wp-content/uploads/2012/01/wysija-youtube-color-player.png)](https://www.youtube.com/watch?v=BMGhKQZWhs8)\r\n\r\n \r\n\r\n\r\n### Contact\r\nJÃ³nathan Heras (joheras@gmail.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}